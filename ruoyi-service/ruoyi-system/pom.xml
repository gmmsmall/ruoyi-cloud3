<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.ruoyi.cloud</groupId>
		<artifactId>ruoyi-service</artifactId>
		<version>1.1.0-SNAPSHOT</version>
	</parent>
	<artifactId>ruoyi-system</artifactId>
	<dependencies>

		<!--配置中心客户端 -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>
		<!--eureka 客户端 -->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-openfeign</artifactId>
		</dependency>

		<!--web 模块 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<exclusions>
				<!--排除tomcat依赖 -->
				<exclusion>
					<artifactId>spring-boot-starter-tomcat</artifactId>
					<groupId>org.springframework.boot</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<!--undertow容器 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-undertow</artifactId>
		</dependency>

		<!--阿里数据库连接池 -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid-spring-boot-starter</artifactId>
		</dependency>
		<!-- Mysql驱动包 -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
		</dependency>


		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

		<!-- 系统模块 -->
		<dependency>
			<groupId>com.ruoyi.cloud</groupId>
			<artifactId>ruoyi-system-api</artifactId>
			<version>${ruoyi.version}</version>
		</dependency>
		<!-- 日志模块 -->
		<dependency>
			<groupId>com.ruoyi.cloud</groupId>
			<artifactId>ruoyi-common-log</artifactId>
			<version>${ruoyi.version}</version>
		</dependency>
		<!-- 权限模块 -->
		<dependency>
			<groupId>com.ruoyi.cloud</groupId>
			<artifactId>ruoyi-common-auth</artifactId>
			<version>${ruoyi.version}</version>
		</dependency>
		<!-- redis模块 -->
		<dependency>
			<groupId>com.ruoyi.cloud</groupId>
			<artifactId>ruoyi-common-redis</artifactId>
			<version>${ruoyi.version}</version>
		</dependency>

		<!-- 获取系统信息 -->
		<dependency>
			<groupId>com.github.oshi</groupId>
			<artifactId>oshi-core</artifactId>
		</dependency>



		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>


		<!-- spring-boot-devtools -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional> <!-- 表示依赖不会传递 -->
		</dependency>


		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
		</dependency>


		<!-- oss -->
		<dependency>
			<groupId>com.qiniu</groupId>
			<artifactId>qiniu-java-sdk</artifactId>
		</dependency>
		<dependency>
			<groupId>com.aliyun.oss</groupId>
			<artifactId>aliyun-sdk-oss</artifactId>
		</dependency>
		<dependency>
			<groupId>com.qcloud</groupId>
			<artifactId>cos_api</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-log4j12</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
		</dependency>

	</dependencies>
	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<fork>true</fork> <!-- 如果没有该配置，devtools不会生效 -->
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
<!--			<plugin>-->
<!--				<groupId>com.spotify</groupId>-->
<!--				<artifactId>docker-maven-plugin</artifactId>-->
<!--				<version>1.0.0</version>-->
<!--				&lt;!&ndash;将插件绑定在某个phase执行&ndash;&gt;-->
<!--				<executions>-->
<!--					<execution>-->
<!--						<id>build-image</id>-->
<!--						&lt;!&ndash;将插件绑定在package这个phase上。也就是说，用户只需执行mvn package ，就会自动执行mvn docker:build&ndash;&gt;-->
<!--						<phase>package</phase>-->
<!--						<goals>-->
<!--							<goal>build</goal>-->
<!--						</goals>-->
<!--					</execution>-->
<!--				</executions>-->
<!--				<configuration>-->
<!--					&lt;!&ndash;指定生成的镜像名&ndash;&gt;-->
<!--					<imageName>${project.artifactId}</imageName>-->
<!--					&lt;!&ndash;指定标签&ndash;&gt;-->
<!--					<imageTags>-->
<!--						<imageTag>latest</imageTag>-->
<!--					</imageTags>-->
<!--					&lt;!&ndash; 指定 Dockerfile 路径 ${project.basedir}：项目根路径下&ndash;&gt;-->
<!--					<dockerDirectory>${project.basedir}</dockerDirectory>-->
<!--					&lt;!&ndash;指定远程 docker api地址&ndash;&gt;-->
<!--					<dockerHost>${docker-host}</dockerHost>-->
<!--					&lt;!&ndash; 这里是复制 jar 包到 docker 容器指定目录配置 &ndash;&gt;-->
<!--					<resources>-->
<!--						<resource>-->
<!--							<targetPath>/</targetPath>-->
<!--							&lt;!&ndash;jar 包所在的路径 此处配置的 即对应 target 目录&ndash;&gt;-->
<!--							<directory>${project.build.directory}</directory>-->
<!--							&lt;!&ndash; 需要包含的 jar包 ，这里对应的是 Dockerfile中添加的文件名　&ndash;&gt;-->
<!--							<include>${project.build.finalName}.jar</include>-->
<!--						</resource>-->
<!--					</resources>-->
<!--					&lt;!&ndash; 以下两行是为了docker push到DockerHub使用的。 &ndash;&gt;-->
<!--					<serverId>docker-hub</serverId>-->
<!--					<registryUrl>https://index.docker.io/v1</registryUrl>-->
<!--				</configuration>-->
<!--			</plugin>-->
		</plugins>
	</build>
</project>